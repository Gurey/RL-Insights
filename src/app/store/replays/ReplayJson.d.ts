// Generated by https://quicktype.io

export interface ReplayJSON {
  gameMetadata: GameMetadata;
  players: ReplayJSONPlayer[];
  teams: Team[];
  gameStats: GameStats;
  parties: Party[];
  version: number;
  mutators: Mutators;
}

export interface GameMetadata {
  id: string;
  name: string;
  map: string;
  version: number;
  time: string;
  frames: number;
  score: Score;
  goals: Goal[];
  demos: Demo[];
  length: number;
  gameServerId: string;
  serverName: string;
  matchGuid: string;
  teamSize: number;
  playlist: string;
}

export interface Demo {
  frameNumber: number;
  attackerId: LeaderID;
  victimId: LeaderID;
  isDemo?: boolean;
}

export interface LeaderID {
  id: string;
}

export interface Goal {
  frameNumber: number;
  playerId: LeaderID;
}

export interface Score {
  team0Score: number;
  team1Score: number;
}

export interface GameStats {
  hits: Hit[];
  neutralPossessionTime: number;
  bumps: Demo[];
  ballStats: BallStats;
  kickoffs: Kickoff[];
  kickoffStats: KickoffStat[];
  ballCarries: BallCarry[];
}

export interface BallCarry {
  startFrameNumber: number;
  endFrameNumber: number;
  playerId: LeaderID;
  hasFlick: boolean;
  carryTime: number;
  straightLineDistance: number;
  carryStats: CarryStats;
}

export interface CarryStats {
  averageZDistance: number;
  averageXyDistance: string;
  averageBallZVelocity: number;
  varianceXyDistance: string;
  varianceZDistance: number;
  varianceBallZVelocity: number;
  averageCarrySpeed: number;
  distanceAlongPath: number;
}

export interface BallStats {
  positionalTendencies: { [key: string]: number };
  averages: BallStatsAverages;
}

export interface BallStatsAverages {
  averageSpeed: number;
}

export interface Hit {
  frameNumber: number;
  playerId: LeaderID;
  collisionDistance: number;
  ballData: BallData;
  pass?: boolean;
  distance: number;
  distanceToGoal: number;
  nextHitFrameNumber?: number;
  goalNumber: number;
  isKickoff: boolean;
  passed?: boolean;
  aerial?: boolean;
  previousHitFrameNumber?: number;
  clear?: boolean;
  dribble?: boolean;
  dribbleContinuation?: boolean;
  shot?: boolean;
  save?: boolean;
  assist?: boolean;
  goal?: boolean;
  assisted?: boolean;
}

export interface BallData {
  posX: number;
  posY: number;
  posZ: number;
}

export interface KickoffStat {
  startFrame: number;
  touchFrame: number;
  touchTime: number;
  type: string;
  touch: Touch;
}

export interface Touch {
  players: TouchPlayer[];
  kickoffGoal: number;
  firstTouchPlayer: LeaderID;
}

export interface TouchPlayer {
  player: LeaderID;
  kickoffPosition: KickoffPosition;
  touchPosition: string;
  playerPosition: BallData;
  boost: number;
  ballDist: number;
  startLeft: boolean;
  startPosition: BallData;
  boostTime?: number;
}

export enum KickoffPosition {
  Diagonal = "DIAGONAL",
  Goalie = "GOALIE",
  Offcenter = "OFFCENTER",
}

export interface Kickoff {
  startFrameNumber: number;
  endFrameNumber: number;
}

export interface Mutators {
  ballType: string;
  gameMutatorIndex: number;
}

export interface Party {
  leaderId: LeaderID;
  members: LeaderID[];
}

export interface ReplayJSONPlayer {
  id: LeaderID;
  name: string;
  titleId: number;
  score: number;
  goals: number;
  assists: number;
  saves: number;
  shots: number;
  cameraSettings: CameraSettings;
  loadout: Loadout;
  isOrange: number;
  stats: PlayerStats;
  partyLeader: LeaderID;
  isBot: boolean;
  timeInGame: number;
  firstFrameInGame: number;
}

export interface CameraSettings {
  stiffness: number;
  height: number;
  transitionSpeed: number;
  pitch: number;
  swivelSpeed: number;
  fieldOfView: number;
  distance: number;
}

export interface Loadout {
  banner: number;
  boost: number;
  car: number;
  goalExplosion: number;
  skin: number;
  trail: number;
  wheels: number;
  version: number;
  topper: number;
  antenna: number;
  engineAudio: number;
  wheelsPaint?: number;
  primaryColor: number;
  accentColor: number;
  primaryFinish: number;
  accentFinish: number;
  avatarBorderUserColor: string;
  goalExplosionPaint?: number;
  boostPaint?: number;
  trailPaint?: number;
}

export interface PlayerStats {
  boost: { [key: string]: number };
  distance: Distance;
  possession: Possession;
  positionalTendencies: { [key: string]: number };
  averages: StatsAverages;
  hitCounts: HitCounts;
  controller: Controller;
  speed: Speed;
  relativePositioning: RelativePositioning;
  perPossessionStats: PerPossessionStats;
  kickoffStats: KickoffStats;
  ballCarries?: BallCarries;
}

export interface StatsAverages {
  averageSpeed: number;
  averageHitDistance: number;
  averageDistanceFromCenter: number;
}

export interface BallCarries {
  totalCarries: number;
  longestCarry: number;
  furthestCarry: number;
  totalCarryTime: number;
  averageCarryTime: number;
  fastestCarrySpeed: number;
  totalCarryDistance: number;
  carryStats: CarryStats;
}

export interface Controller {
  isKeyboard: boolean;
  analogueSteeringInputPercent: number;
  analogueThrottleInputPercent: number;
}

export interface Distance {
  ballHitForward: number;
  ballHitBackward: number;
  timeClosestToBall: number;
  timeFurthestFromBall: number;
  timeCloseToBall: number;
  timeClosestToTeamCenter: number;
  timeFurthestFromTeamCenter: number;
}

export interface HitCounts {
  totalHits: number;
  totalPasses: number;
  totalShots?: number;
  totalDribbles: number;
  totalDribbleConts: number;
  totalAerials?: number;
  totalClears: number;
  totalSaves?: number;
}

export interface KickoffStats {
  totalKickoffs: number;
  numTimeBoost?: number;
  averageBoostUsed: number;
  numTimeDefend?: number;
  numTimeGoToBall?: number;
  numTimeFirstTouch?: number;
  numTimeCheat?: number;
  numTimeAfk?: number;
}

export interface PerPossessionStats {
  averageCounts: AverageCounts;
  averageDuration: number;
  averageHits: number;
  count: number;
}

export interface AverageCounts {
  pass: number;
  passed: number;
  dribble: number;
  dribbleContinuation: number;
  shot: number;
  goal: number;
  assist: number;
  assisted: number;
  save: number;
  aerial: number;
}

export interface Possession {
  possessionTime: number;
  turnovers: number;
  turnoversOnMyHalf: number;
  turnoversOnTheirHalf?: number;
  wonTurnovers: number;
}

export interface RelativePositioning {
  timeInFrontOfCenterOfMass: number;
  timeBehindCenterOfMass: number;
  timeMostForwardPlayer: number;
  timeMostBackPlayer: number;
  timeBetweenPlayers: number;
}

export interface Speed {
  timeAtSlowSpeed: number;
  timeAtSuperSonic: number;
  timeAtBoostSpeed: number;
}

export interface Team {
  playerIds: LeaderID[];
  score: number;
  isOrange: boolean;
  stats: TeamStats;
}

export interface TeamStats {
  possession: Possession;
  hitCounts: HitCounts;
  centerOfMass: CenterOfMass;
}

export interface CenterOfMass {
  positionalTendencies: { [key: string]: number };
  averageDistanceFromCenter: number;
  averageMaxDistanceFromCenter: number;
  timeClumped: number;
  timeBoondocks: number;
}
